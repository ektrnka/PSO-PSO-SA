#####################################################################
import math
import random
import time
import matplotlib.pyplot as plt
import numpy as np


def objective_function(O):
    ...
    
#####################################################################

T = 1.0 
T_min = 0.000001 
alpha = 0.9 

#####################################################################
class Particle:
    def __init__(self, bounds):
        self.particle_position = [] 
        self.particle_velocity = [] 
        self.local_best_particle_position = [] 
        self.fitness_local_best_particle_position = initial_fitness
        self.fitness_particle_position = initial_fitness

        for i in range(nv):
            self.particle_position.append(
                random.uniform(bounds[i][0], bounds[i][1]))
            self.particle_velocity.append(random.uniform(-1, 1))

    def evaluate(self, objective_function):
        self.fitness_particle_position = objective_function(self.particle_position)

        if mm == -1:
            if self.fitness_particle_position < self.fitness_local_best_particle_position:
                self.local_best_particle_position = self.particle_position  
                self.fitness_local_best_particle_position = self.fitness_particle_position  

        if mm == 1:
            if self.fitness_particle_position > self.fitness_local_best_particle_position:
                self.local_best_particle_position = self.particle_position  
                self.fitness_local_best_particle_position = self.fitness_particle_position  

    def update_velocity(self, global_best_particle_position, T):
        for i in range(nv):
            rnd = -1 if random.random() < T else 1
            r1 = random.random()
            r2 = random.random()
            cognitive_velocity = c1 * r1 * (self.local_best_particle_position[i] - self.particle_position[i])
            social_velocity = c2 * r2 * (global_best_particle_position[i] - self.particle_position[i])
            self.particle_velocity[i] = rnd * w * self.particle_velocity[i] + cognitive_velocity + social_velocity

    def update_position(self, bounds):
        for i in range(nv):
            self.particle_position[i] = self.particle_position[i] + self.particle_velocity[i]

            if self.particle_position[i] > bounds[i][1]:
                self.particle_position[i] = bounds[i][1]


            if self.particle_position[i] < bounds[i][0]:
                self.particle_position[i] = bounds[i][0]

if mm == -1:
    initial_fitness = float("inf")  
if mm == 1:
    initial_fitness = -float("inf")  

fitness_global_best_particle_position = initial_fitness
global_best_particle_position = []
swarm_particle = []

for i in range(particle_size):
    swarm_particle.append(Particle(bounds))

for i in range(iterations):
    for j in range(particle_size):
        swarm_particle[j].evaluate(objective_function)

        if mm == -1:
            if swarm_particle[j].fitness_particle_position < fitness_global_best_particle_position:
                global_best_particle_position = list(swarm_particle[j].particle_position)
                fitness_global_best_particle_position = float(swarm_particle[j].fitness_particle_position)
        if mm == 1:
            if swarm_particle[j].fitness_particle_position > fitness_global_best_particle_position:
                global_best_particle_position = list(swarm_particle[j].particle_position)
                fitness_global_best_particle_position = float(swarm_particle[j].fitness_particle_position)

    for j in range(particle_size):
        swarm_particle[j].update_velocity(global_best_particle_position, T)
        swarm_particle[j].update_position(bounds)
        

    T = T * alpha

    if T < T_min:
        T = T_min

    plt.figure()
    for particle in swarm_particle:
        plt.scatter(*particle.particle_position, color='b')
    plt.title('Итерация {}'.format(i))
    plt.xlabel("X")
    plt.ylabel("Y")
    plt.show()
    plt.close()

print("RESULT:")
print('Optimal solution:', global_best_particle_position)
print('Objective function value:', fitness_global_best_particle_position)
